#include <stdio.h>
#include <stdlib.h>

#define MAX_VERTICES 100

typedef struct {
    int u, v, weight;
} Edge;

int parent[MAX_VERTICES], rank[MAX_VERTICES];

// Find operation with path compression
int findParent(int node) {
    if (parent[node] != node)
        parent[node] = findParent(parent[node]);
    return parent[node];
}

// Union operation with rank optimization
void unionSet(int u, int v) {
    int rootU = findParent(u);
    int rootV = findParent(v);

    if (rootU != rootV) {
        if (rank[rootU] < rank[rootV])
            parent[rootU] = rootV;
        else if (rank[rootU] > rank[rootV])
            parent[rootV] = rootU;
        else {
            parent[rootV] = rootU;
            rank[rootU]++;
        }
    }
}

// Comparator function for sorting edges
int comparator(const void* p1, const void* p2) {
    return ((Edge*)p1)->weight - ((Edge*)p2)->weight;
}

// Kruskal's algorithm
void kruskalAlgo(int n, Edge edge[], int numEdges) {
    int minCost = 0;
    for (int i = 0; i < n; i++) {
        parent[i] = i;
        rank[i] = 0;
    }

    qsort(edge, numEdges, sizeof(Edge), comparator);

    printf("Edges in the MST:\n");
    for (int i = 0; i < numEdges; i++) {
        int rootU = findParent(edge[i].u);
        int rootV = findParent(edge[i].v);
        if (rootU != rootV) {
            printf("%d -- %d == %d\n", edge[i].u, edge[i].v, edge[i].weight);
            minCost += edge[i].weight;
            unionSet(rootU, rootV);
        }
    }
    printf("Minimum Cost Spanning Tree: %d\n", minCost);
}

// Driver code
int main() {
    Edge edge[] = { {0, 1, 10},
                    {0, 2, 6},
                    {0, 3, 5},
                    {1, 3, 15},
                    {2, 3, 4} };
    int numEdges = sizeof(edge) / sizeof(edge[0]);
    kruskalAlgo(4, edge, numEdges);
    return 0;
}